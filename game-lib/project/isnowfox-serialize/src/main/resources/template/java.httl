<!--#set(Message m)-->
<!--#set(Attribute attr)-->
<!--#set(Utils utils)-->
package $!{utils.getJavaPack(m)};

import java.io.IOException;

import com.isnowfox.core.io.Input;
import com.isnowfox.core.io.Output;
import com.isnowfox.core.io.ProtocolException;

import com.isnowfox.core.net.message.AbstractMessage;
<!--#for(item : m.javaImports)-->
import $!{item};
<!--#end-->

<!--		#if(m.comment)-->
/**
 * $!{utils.formatComment(m.comment," ")}
 * 
 * <b>生成器生成代码，请勿修改，扩展请继承</b>
 * @author isnowfox消息生成器
 */
<!--		#end-->
public class $!{m.name} extends AbstractMessage{
	public static final int TYPE			 = $!{m.type};
	public static final int ID				 = $!{m.id};
	
<!--#for(attr : m.attributes)-->
<!--		#if(attr.comment)-->
	/**
	 * $!{utils.formatComment(attr.comment,"	 ")}
	 */
<!--		#end-->
	private $!{utils.getJavaType(attr)} $!{attr.name};
<!--#end-->
	
	public $!{m.name}(){
		
	}
	
<!--#if(!m.attributes.empty())-->
	public $!{m.name}($!{m.getJavaConstructorString(utils)}){
<!--		#for(attr : m.attributes)-->
		this.$!{attr.name} = $!{attr.name};
<!--		#end-->	
	}
	
<!--#end-->	
	@Override
	public void decode(Input in)  throws IOException, ProtocolException {
<!--#for(attr : m.attributes)-->	
<!--		#if(attr.basType)-->
		$!{attr.name} = in.$!{attr.basDecodeMethod}();
<!--		#else-->
<!--				#if(attr.isArray)-->
		
		int $!{attr.name}Len = in.readInt();
		if($!{attr.name}Len == -1){
			$!{attr.name} = null;
		}else{
			$!{attr.name} = new $!{utils.getJavaType(attr)}($!{attr.name}Len);
			for(int i = 0; i < $!{attr.name}Len; i++){
				$!{attr.typeName} $!{attr.name}Item = new $!{attr.typeName}();
				$!{attr.name}Item.decode(in);
				$!{attr.name}.add($!{attr.name}Item);
			}
		}
<!--				#else-->
		
		boolean $!{attr.name}IsNotNull = in.readBoolean();
		if($!{attr.name}IsNotNull){
			$!{attr.name} = new $!{utils.getJavaType(attr)}();
			$!{attr.name}.decode(in);
		}else{
			$!{attr.name} = null;
		}
<!--				#end-->
<!--		#end-->
<!--#end-->	
	}

	@Override
	public void encode(Output out)  throws IOException, ProtocolException {
<!--#for(attr : m.attributes)-->	
<!--		#if(attr.basType)-->
		out.$!{attr.basEncodeMethod}($!{attr.javaGetName}());
<!--		#else-->
<!--				#if(attr.isArray)-->
		
		if($!{attr.name} == null){
			out.writeInt(-1);
		}else{
			$!{utils.getJavaType(attr)} $!{attr.name}List = $!{attr.javaGetName}();
			int $!{attr.name}Len = $!{attr.name}List.size();
			out.writeInt($!{attr.name}Len);
			for($!{attr.typeName} $!{attr.name}Item: $!{attr.name}List){
				$!{attr.name}Item.encode(out);
			}
		}
<!--				#else-->
		$!{utils.getJavaType(attr)} $!{attr.name}Item = $!{attr.javaGetName}();
		if($!{attr.name}Item  == null){
			out.writeBoolean(false);
		}else{
			out.writeBoolean(true);
			$!{attr.name}Item.encode(out);
		}
<!--				#end-->
<!--		#end-->
<!--#end-->	
	}
<!--#for(attr : m.attributes)-->

<!--		#if(attr.comment)-->
	/**
	 * $!{utils.formatComment(attr.comment,"	 ")}
	 */
<!--		#end-->
	public $!{utils.getJavaType(attr)} $!{attr.javaGetName}() {
		return $!{attr.name};
	}
	
<!--		#if(attr.comment)-->
	/**
	 * $!{utils.formatComment(attr.comment,"	 ")}
	 */
<!--		#end-->
	public void $!{attr.javaSetName}($!{utils.getJavaType(attr)} $!{attr.name}) {
		this.$!{attr.name} = $!{attr.name};
	}
<!--#end-->
##List的add函数
<!--#for(attr : m.attributes)-->	
<!--		#if(!attr.basType && attr.isArray)-->
	
<!--		#if(attr.comment)-->
	/**
	 * $!{utils.formatComment(attr.comment,"	 ")}
	 */
<!--		#end-->
	public void $!{attr.javaAddName}($!{attr.typeName} $!{attr.name}) {
		if(this.$!{attr.name} == null){
			this.$!{attr.name} = new $!{utils.getJavaType(attr)}();
		}
		this.$!{attr.name}.add($!{attr.name});
	}
<!--		#end-->
<!--#end-->	
	
	@Override
	public String toString() {
		return $!{m.getJavaToString};
	}
	
	@Override
	public final int getMessageType() {
		return TYPE;
	}

	@Override
	public final int getMessageId() {
		return ID;
	}
}
